@using Fuzzbin.Core.Entities
@using System.Net.Http.Json
@using MudBlazor
@inject HttpClient HttpClient
@inject ISnackbar Snackbar

<MudDialog>
    <DialogContent>
        <MudText Typo="Typo.body1" Class="mb-4">
            Select a target genre to merge the selected genres into. All videos from the source genres will be associated with the target genre.
        </MudText>

        <MudText Typo="Typo.subtitle2" Class="mb-2">Source Genres (@_selectedGenres.Count):</MudText>
        <MudList T="string" Dense="true" Class="mb-4">
            @foreach (var genre in _selectedGenres)
            {
                <MudListItem T="string">
                    <MudText Typo="Typo.body2">@genre.Name (@genre.Videos.Count videos)</MudText>
                </MudListItem>
            }
        </MudList>

        <MudSelect @bind-Value="_targetGenreId"
                   Label="Target Genre"
                   Variant="Variant.Outlined"
                   Required="true"
                   T="Guid">
            @foreach (var genre in _selectedGenres)
            {
                <MudSelectItem Value="@genre.Id">@genre.Name</MudSelectItem>
            }
        </MudSelect>

        @if (_targetGenreId != Guid.Empty)
        {
            var targetGenre = _selectedGenres.FirstOrDefault(g => g.Id == _targetGenreId);
            var sourceGenres = _selectedGenres.Where(g => g.Id != _targetGenreId).ToList();
            var totalVideos = sourceGenres.Sum(g => g.Videos.Count);

            <MudAlert Severity="Severity.Info" Class="mt-3">
                This will merge @sourceGenres.Count genre(s) into <strong>@targetGenre?.Name</strong>.
                Approximately @totalVideos video(s) will be updated. The source genres will be deleted.
            </MudAlert>
        }
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary"
                   Variant="Variant.Filled"
                   OnClick="Submit"
                   Disabled="@(_targetGenreId == Guid.Empty || _submitting)">
            @if (_submitting)
            {
                <MudProgressCircular Size="Size.Small" Indeterminate="true" />
            }
            else
            {
                <text>Generalize</text>
            }
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; } = null!;

    [Parameter]
    public List<Genre> SelectedGenres { get; set; } = new();

    private List<Genre> _selectedGenres = new();
    private Guid _targetGenreId = Guid.Empty;
    private bool _submitting;

    protected override void OnParametersSet()
    {
        _selectedGenres = SelectedGenres ?? new List<Genre>();
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private async Task Submit()
    {
        if (_targetGenreId == Guid.Empty) return;

        _submitting = true;
        try
        {
            var sourceGenreIds = _selectedGenres
                .Where(g => g.Id != _targetGenreId)
                .Select(g => g.Id)
                .ToList();

            var request = new
            {
                SourceGenreIds = sourceGenreIds,
                TargetGenreId = _targetGenreId
            };

            var response = await HttpClient.PostAsJsonAsync("/api/genres/generalize", request);

            if (response.IsSuccessStatusCode)
            {
                var targetGenre = _selectedGenres.First(g => g.Id == _targetGenreId);
                Snackbar.Add($"Successfully generalized {sourceGenreIds.Count} genre(s) into '{targetGenre.Name}'", Severity.Success);
                MudDialog.Close(DialogResult.Ok(true));
            }
            else
            {
                var error = await response.Content.ReadFromJsonAsync<ErrorResponse>();
                Snackbar.Add(error?.Message ?? "Failed to generalize genres", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error generalizing genres: {ex.Message}", Severity.Error);
        }
        finally
        {
            _submitting = false;
        }
    }

    private record ErrorResponse(string Message);
}