@using System.Collections.Generic
@using System.Linq
@using Microsoft.AspNetCore.Components.Web
@using MudBlazor
@using Fuzzbin.Core.Entities

<MudTable Items="Videos"
          Hover="true"
          Striped="true"
          Dense="true"
          Virtualize="true"
          VirtualItemSize="56"
          VirtualizationOverscanCount="4">
    <HeaderContent>
        <MudTh></MudTh>
        <MudTh>Title</MudTh>
        <MudTh>Artist</MudTh>
        <MudTh>Album</MudTh>
        <MudTh>Genres</MudTh>
        <MudTh>Label</MudTh>
        <MudTh>Tags</MudTh>
        <MudTh>Collections</MudTh>
        <MudTh>Year</MudTh>
        <MudTh>Duration</MudTh>
        <MudTh>Format</MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate Context="video">
        <MudTd>
            <MudCheckBox T="bool" Checked="SelectedVideoIds.Contains(video.Id)"
                         DisableRipple="true"
                         CheckedChanged="_ => OnSelectionToggled.InvokeAsync(video)" />
        </MudTd>
        <MudTd Class="cursor-pointer" @onclick="async () => await HandleRowClickAsync(video)">
            <div class="d-flex align-center"
                 @oncontextmenu="@(e => HandleContextMenu(e, video))"
                 @oncontextmenu:preventDefault="true">
                <MudAvatar Size="Size.Small" Image="@ThumbnailUrlSelector?.Invoke(video)" />
                <MudText Class="ml-2">@video.Title</MudText>
            </div>
        </MudTd>
        <MudTd>@video.Artist</MudTd>
        <MudTd>@FormatAlbum(video)</MudTd>
        <MudTd>@FormatGenres(video)</MudTd>
        <MudTd>@FormatLabel(video)</MudTd>
        <MudTd>@FormatTags(video)</MudTd>
        <MudTd>@FormatCollections(video)</MudTd>
        <MudTd>@(video.Year?.ToString() ?? "—")</MudTd>
        <MudTd>@DurationFormatter?.Invoke(video)</MudTd>
        <MudTd>@(video.Format ?? "—")</MudTd>
        <MudTd Class="text-right">
            <MudIconButton Icon="@Icons.Material.Filled.PlayArrow"
                           Color="Color.Primary"
                           Size="Size.Small"
                           OnClick="async () => await OnPlayClickedAsync(video)" />
            <MudIconButton Icon="@Icons.Material.Filled.SkipNext"
                           Color="Color.Secondary"
                           Size="Size.Small"
                           OnClick="async () => await OnPlayNextClickedAsync(video)" />
            <MudIconButton Icon="@Icons.Material.Filled.PlaylistAdd"
                           Color="Color.Info"
                           Size="Size.Small"
                           OnClick="async () => await OnAddToQueueClickedAsync(video)" />
            <MudIconButton Icon="@Icons.Material.Filled.Edit"
                           Size="Size.Small"
                           OnClick="async () => await OnEditClickedAsync(video)" />
            <MudIconButton Icon="@Icons.Material.Filled.Delete"
                           Color="Color.Error"
                           Size="Size.Small"
                           OnClick="async () => await OnDeleteClickedAsync(video)" />
        </MudTd>
    </RowTemplate>
</MudTable>

@code {
    [Parameter]
    public IReadOnlyList<Video> Videos { get; set; } = Array.Empty<Video>();

    [Parameter]
    public HashSet<Guid> SelectedVideoIds { get; set; } = new();

    [Parameter]
    public Func<Video, string?>? ThumbnailUrlSelector { get; set; }

    [Parameter]
    public Func<Video, string>? DurationFormatter { get; set; }

    [Parameter]
    public EventCallback<Video> OnVideoClicked { get; set; }

    [Parameter]
    public EventCallback<Video> OnPlay { get; set; }

    [Parameter]
    public EventCallback<Video> OnPlayNext { get; set; }

    [Parameter]
    public EventCallback<Video> OnAddToQueue { get; set; }

    [Parameter]
    public EventCallback<Video> OnEdit { get; set; }

    [Parameter]
    public EventCallback<Video> OnDelete { get; set; }

    [Parameter]
    public EventCallback<Video> OnSelectionToggled { get; set; }

    [Parameter]
    public EventCallback<(Video Video, MouseEventArgs MouseEvent)> OnContextMenuRequested { get; set; }

    private bool _suppressRowClick;

    private Task HandleContextMenu(MouseEventArgs args, Video video)
    {
        return OnContextMenuRequested.InvokeAsync((video, args));
    }

    private async Task HandleRowClickAsync(Video video)
    {
        if (_suppressRowClick)
        {
            _suppressRowClick = false;
            return;
        }

        await OnVideoClicked.InvokeAsync(video);
    }

    private async Task OnPlayClickedAsync(Video video)
    {
        _suppressRowClick = true;
        await OnPlay.InvokeAsync(video);
        _suppressRowClick = false;
    }

    private async Task OnPlayNextClickedAsync(Video video)
    {
        _suppressRowClick = true;
        await OnPlayNext.InvokeAsync(video);
        _suppressRowClick = false;
    }

    private async Task OnAddToQueueClickedAsync(Video video)
    {
        _suppressRowClick = true;
        await OnAddToQueue.InvokeAsync(video);
        _suppressRowClick = false;
    }

    private async Task OnEditClickedAsync(Video video)
    {
        _suppressRowClick = true;
        await OnEdit.InvokeAsync(video);
        _suppressRowClick = false;
    }

    private async Task OnDeleteClickedAsync(Video video)
    {
        _suppressRowClick = true;
        await OnDelete.InvokeAsync(video);
        _suppressRowClick = false;
    }

    private static string FormatAlbum(Video video) =>
        string.IsNullOrWhiteSpace(video.Album) ? "—" : video.Album;

    private static string FormatLabel(Video video) =>
        string.IsNullOrWhiteSpace(video.Publisher) ? "—" : video.Publisher;

    private static string FormatGenres(Video video) =>
        FormatNameList(video.Genres?.Select(g => g.Name));

    private static string FormatTags(Video video) =>
        FormatNameList(video.Tags?.Select(t => t.Name));

    private static string FormatCollections(Video video) =>
        FormatNameList(video.CollectionVideos?
            .Select(cv => cv.Collection?.Name));

    private static string FormatNameList(IEnumerable<string?>? values)
    {
        if (values == null)
        {
            return "—";
        }

        var names = values
            .Where(name => !string.IsNullOrWhiteSpace(name))
            .Select(name => name!.Trim())
            .Where(name => name.Length > 0)
            .Distinct(System.StringComparer.OrdinalIgnoreCase)
            .ToList();

        return names.Count == 0 ? "—" : string.Join(", ", names);
    }
}
